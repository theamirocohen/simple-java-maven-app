name: Build and Dockerize

on:
 push:
    branches: [ master ]  # Change to 'main' if needed
 pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-dockerize:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      # Checkout code
      - uses: actions/checkout@v4

          
      # Build with Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Dependency Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          severity: CRITICAL
          exit-code: '1'
          ignore-unfixed: true
          format: table
          vuln-type: library
          path: .

      - name: Build with Maven
        run: mvn -B package



      # Login to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract project version from pom.xml
      - name: Get Maven version
        id: maven-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "SHORT_VERSION=$(echo $VERSION | cut -d'.' -f1-2)" >> $GITHUB_ENV

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository_url }}

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          format: json
          output: trivy-report.json
          severity: CRITICAL
          ignore-unfixed: true

      - name: Check Trivy critical count
        run: |
          CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-report.json)
          echo "Found $CRITICAL_COUNT critical vulnerabilities"
          if [ "$CRITICAL_COUNT" -gt 5 ]; then
            echo "Too many critical vulnerabilities ($CRITICAL_COUNT), failing."
            exit 1
          fi


      # Deploy to EC2
      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          cat >> ~/.ssh/config <<EOF
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USER }}
            IdentityFile ~/.ssh/ec2_key
            StrictHostKeyChecking no
          EOF

      #- name: Test Connection
      #  run: ssh -v ec2 "echo 'SSH connection successful!'"

      #- name: Deploy Container
      #  run: |
      #    ssh -v ec2 /bin/bash <<'EOL'
      #    # --- Debugging info ---
      #    echo "EC2 Host: $(hostname)"
      #    echo "Docker version: $(docker --version)"
      #    echo "Current containers: $(docker ps -a)"
          
          # Login to GHCR
      #    echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin || echo "GHCR login failed"            
      #      # Stop/remove old container
      #     docker stop myapp || true
      #      docker rm myapp || true
            
            # Pull new image and run
      #      docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      #      docker run -d \
      #        --name myapp \
      #        -p 8080:8080 \
      #        ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
