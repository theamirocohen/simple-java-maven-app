name: Build and Dockerize

on:
  push:
    branches: [ master ]  # Change to 'main' if needed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-dockerize:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Build with Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'


      # Dependency Scanning (early in pipeline)
      - name: Dependency Check Setup
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 11  # Dependency-Check works well with Java 11

      - name: Run OWASP Dependency-Check
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Download Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v${{ env.DEPENDENCY_CHECK_VERSION }}/dependency-check-${{ env.DEPENDENCY_CHECK_VERSION }}-release.zip
          unzip dependency-check-${{ env.DEPENDENCY_CHECK_VERSION }}-release.zip
          echo "${{ env.DEPENDENCY_CHECK_VERSION }}" > dependency-check-version.txt

      - name: Scan dependencies
        run: |
          ./dependency-check/bin/dependency-check.sh \
            --project "${{ github.repository }}" \
            --scan "." \
            --format "SARIF" \
            --failOnCVSS 9.0 \
            --enableExperimental \
            --scanTarget "**/*.jar" \
            --scanTarget "**/target/*.jar"
        
        # Fail the build if critical vulnerabilities found
        if [ -f reports/dependency-check-report.sarif ]; then
          echo "SARIF report generated"
          # Additional check logic if needed
        else
          echo "::error::Dependency check failed"
          exit 1
        fi

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif


      - name: Build with Maven
        run: mvn -B package

      # Login to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract project version from pom.xml
      - name: Get Maven version
        id: maven-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "SHORT_VERSION=$(echo $VERSION | cut -d'.' -f1-2)" >> $GITHUB_ENV

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository_url }}

      # Deploy to EC2
      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          cat >> ~/.ssh/config <<EOF
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USER }}
            IdentityFile ~/.ssh/ec2_key
            StrictHostKeyChecking no
          EOF

      - name: Test Connection
        run: ssh -v ec2 "echo 'SSH connection successful!'"

      - name: Deploy Container
        run: |
          ssh -v ec2 /bin/bash <<'EOL'
          # --- Debugging info ---
          echo "EC2 Host: $(hostname)"
          echo "Docker version: $(docker --version)"
          echo "Current containers: $(docker ps -a)"
          
          # Login to GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin || echo "GHCR login failed"            
            # Stop/remove old container
            docker stop myapp || true
            docker rm myapp || true
            
            # Pull new image and run
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            docker run -d \
              --name myapp \
              -p 8080:8080 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
